// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TravelCompanion.Modules.Payments.Infrastructure;

#nullable disable

namespace TravelCompanion.Modules.Payments.Infrastructure.EF.Migrations
{
    [DbContext(typeof(PaymentsDbContext))]
    [Migration("20240417054655_TravelUserSummary_Add")]
    partial class TravelUserSummary_Add
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("payments")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.PaymentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TravelUserSummaryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TravelUserSummaryId");

                    b.ToTable("PaymentRecord", "payments");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("ParticipantsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid?>("TravelSummaryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TravelSummaryId");

                    b.ToTable("Receipts", "payments");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.Property<Guid>("TravelId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TravelSummaries", "payments");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelUserSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TravelUserSummaries", "payments");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.PaymentRecord", b =>
                {
                    b.HasOne("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelUserSummary", null)
                        .WithMany("Payments")
                        .HasForeignKey("TravelUserSummaryId");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.Receipt", b =>
                {
                    b.HasOne("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelSummary", null)
                        .WithMany("ParticipantsCosts")
                        .HasForeignKey("TravelSummaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TravelCompanion.Shared.Abstractions.Kernel.ValueObjects.Money.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("ReceiptId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Value");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Currency");

                            b1.HasKey("ReceiptId");

                            b1.ToTable("Receipts", "payments");

                            b1.WithOwner()
                                .HasForeignKey("ReceiptId");
                        });

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelSummary", b =>
                {
                    b.OwnsOne("TravelCompanion.Shared.Abstractions.Kernel.ValueObjects.Money.Money", "PointsAdditionalCost", b1 =>
                        {
                            b1.Property<Guid>("TravelSummaryId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("PointsAdditionalCostValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PointsAdditionalCostCurrency");

                            b1.HasKey("TravelSummaryId");

                            b1.ToTable("TravelSummaries", "payments");

                            b1.WithOwner()
                                .HasForeignKey("TravelSummaryId");
                        });

                    b.OwnsOne("TravelCompanion.Shared.Abstractions.Kernel.ValueObjects.Money.Money", "TotalCost", b1 =>
                        {
                            b1.Property<Guid>("TravelSummaryId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("TotalCostValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("TotalCostCurrency");

                            b1.HasKey("TravelSummaryId");

                            b1.ToTable("TravelSummaries", "payments");

                            b1.WithOwner()
                                .HasForeignKey("TravelSummaryId");
                        });

                    b.OwnsOne("TravelCompanion.Shared.Abstractions.Kernel.ValueObjects.Money.Money", "TravelAdditionalCost", b1 =>
                        {
                            b1.Property<Guid>("TravelSummaryId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("TravelAdditionalCostValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("TravelAdditionalCostCurrency");

                            b1.HasKey("TravelSummaryId");

                            b1.ToTable("TravelSummaries", "payments");

                            b1.WithOwner()
                                .HasForeignKey("TravelSummaryId");
                        });

                    b.Navigation("PointsAdditionalCost")
                        .IsRequired();

                    b.Navigation("TotalCost")
                        .IsRequired();

                    b.Navigation("TravelAdditionalCost")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelSummary", b =>
                {
                    b.Navigation("ParticipantsCosts");
                });

            modelBuilder.Entity("TravelCompanion.Modules.Payments.Domain.Payments.Entities.TravelUserSummary", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
