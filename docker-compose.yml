services:
  travelcompanion.bootstrapper:
    build:
      context: ./API
      dockerfile: ./src/Bootstrapper/TravelCompanion.Bootstrapper/Dockerfile
      target: debug
      args:
        BUILD_CONFIGURATION: Debug
    depends_on:
      travelcompanion-postgres:
        condition: service_healthy
    environment:
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_HOSTBUILDER__RELOADCONFIGONCHANGE=false
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - postgres__connectionString=Host=travelcompanion-postgres;Database=travelCompanion;Username=postgres;Password=postgres
      - postgres__hangfireConnectionString=Host=travelcompanion-postgres;Database=travelCompanionHangfire;Username=postgres;Password=postgres
      - AllowedCorsPolicy__AngularClientPolicy=localhost:4200
      - ElasticConfiguration__Uri=http://elasticsearch:9200
    ports:
      - "5000:5000"
      - "5005:5005"
    networks:
      - travelcompanion-network

  travelcompanion-postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: travelCompanion
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./API/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      retries: 10
    networks:
      - travelcompanion-network

  travelcompanion-pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_LOG_LEVEL: ERROR
    volumes:
      - ./API/configurations/pgadmin/servers.json:/var/lib/pgadmin/servers.json:ro
      - ./API/configurations/pgadmin/pgpass:/pgpass:ro
    entrypoint: /entrypoint.sh
    ports:
      - "5050:80"
    depends_on:
      - travelcompanion-postgres
    networks:
      - travelcompanion-network

  travelcompanion-ui:
    build:
      context: ./UI
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./UI/src:/app/src
      - /node_modules
    environment:
      ENV: development
      API_URL: http://localhost:5000
    depends_on:
      - travelcompanion.bootstrapper
    networks:
      - travelcompanion-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - travelcompanion-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    ports:
      - "5010:5000"
    volumes:
      - ./API/configurations/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - travelcompanion-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - travelcompanion-network

volumes:
  postgres_data:


networks:
  travelcompanion-network:
    driver: bridge
