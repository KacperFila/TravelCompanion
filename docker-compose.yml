services:
  travelcompanion.bootstrapper:
    build:
      context: ./API
      dockerfile: ./src/Bootstrapper/TravelCompanion.Bootstrapper/Dockerfile
    depends_on:
      travelcompanion-postgres:
        condition: service_healthy
    environment:
      - postgres__connectionString=Host=travelcompanion-postgres;Database=travelCompanion;Username=postgres;Password=postgres
      - postgres__hangfireConnectionString=Host=travelcompanion-postgres;Database=travelCompanionHangfire;Username=postgres;Password=postgres
    ports:
      - "5000:5000"
    networks:
      - travelcompanion-network

  travelcompanion-postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: travelCompanion
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./API/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      retries: 10
    networks:
      - travelcompanion-network

  travelcompanion-ui:
    build:
      context: ./UI
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./UI/src:/app/src  # Mount the src directory for live reload
      - /node_modules  # To avoid issues with node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - travelcompanion.bootstrapper
    networks:
      - travelcompanion-network

volumes:
  postgres_data:

networks:
  travelcompanion-network:
    driver: bridge